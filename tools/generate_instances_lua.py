import os
import json
from typing import Dict, Any, List, Tuple


INSTANCE_SUFFIXES = {
    '.moby.json': 'moby',
    '.controller.json': 'controller',
    '.path.json': 'path',
    '.volume.json': 'volume',
    '.clue.json': 'clue',
    '.area.json': 'area',
    '.pod.json': 'pod',
    '.scent.json': 'scent',
}


def _hex_tuid(value: Any) -> str:
    try:
        tuid = int(value)
        return f"0x{tuid:016X}"
    except Exception:
        # fallback string
        return str(value)


def _escape_lua_string(s: str) -> str:
    # Échapper guillemets et backslashes
    return s.replace('\\', r'\\').replace('"', r'\"')


def _collect_instances(root: str) -> List[Tuple[str, Dict[str, Any]]]:
    results: List[Tuple[str, Dict[str, Any]]] = []
    for base, _dirs, files in os.walk(root):
        for fn in files:
            for suf, typ in INSTANCE_SUFFIXES.items():
                if fn.endswith(suf):
                    p = os.path.join(base, fn)
                    try:
                        with open(p, 'r', encoding='utf-8') as f:
                            obj = json.load(f)
                        # Normaliser infos minimales
                        entry = {
                            'type': typ,
                            'tuid': _hex_tuid(obj.get('tuid')),
                            'name': obj.get('name') or os.path.splitext(os.path.splitext(fn)[0])[0],
                            'zone': int(obj.get('zone', 0)),
                        }
                        results.append((typ, entry))
                    except Exception:
                        pass
                    break
    # Ordonner: par type, zone, tuid
    results.sort(key=lambda t: (t[0], t[1]['zone'], t[1]['tuid']))
    return results


def _emit_lua(instances: List[Tuple[str, Dict[str, Any]]]) -> str:
    # Construire différents index
    all_items: List[Dict[str, Any]] = [e for _t, e in instances]
    by_type: Dict[str, List[Dict[str, Any]]] = {}
    by_tuid: Dict[str, Dict[str, Any]] = {}
    by_zone: Dict[int, List[Dict[str, Any]]] = {}

    for typ, e in instances:
        by_type.setdefault(typ, []).append(e)
        by_tuid[e['tuid']] = {'type': e['type'], 'name': e['name'], 'zone': e['zone']}
        by_zone.setdefault(e['zone'], []).append(e)

    # Helper pour sérialiser une table Lua simple
    def lua_val(v):
        if isinstance(v, str):
            return '"' + _escape_lua_string(v) + '"'
        if isinstance(v, bool):
            return 'true' if v else 'false'
        if isinstance(v, (int, float)):
            return str(v)
        return 'nil'

    def lua_table_list(items: List[Dict[str, Any]]) -> str:
        lines: List[str] = ['{']
        for e in items:
            lines.append('  { type=' + lua_val(e['type']) + ', tuid=' + lua_val(e['tuid']) + ', name=' + lua_val(e['name']) + ', zone=' + lua_val(e['zone']) + ' },')
        lines.append('}')
        return '\n'.join(lines)

    def lua_table_map_tuid(m: Dict[str, Dict[str, Any]]) -> str:
        lines: List[str] = ['{']
        for k in sorted(m.keys()):
            v = m[k]
            lines.append('  [' + lua_val(k) + '] = { type=' + lua_val(v['type']) + ', name=' + lua_val(v['name']) + ', zone=' + lua_val(v['zone']) + ' },')
        lines.append('}')
        return '\n'.join(lines)

    def lua_table_map_zone(m: Dict[int, List[Dict[str, Any]]]) -> str:
        lines: List[str] = ['{']
        for z in sorted(m.keys()):
            lines.append('  [' + str(z) + '] = ' + lua_table_list(m[z]).replace('\n', '\n  ') + ',')
        lines.append('}')
        return '\n'.join(lines)

    def lua_table_by_type(m: Dict[str, List[Dict[str, Any]]]) -> str:
        lines: List[str] = ['{']
        for typ in sorted(m.keys()):
            lines.append('  ' + typ + ' = ' + lua_table_list(m[typ]).replace('\n', '\n  ') + ',')
        lines.append('}')
        return '\n'.join(lines)

    chunks: List[str] = []
    chunks.append('-- Auto-generated by tools/generate_instances_lua.py')
    chunks.append('local instances = {}')
    chunks.append('instances.all = ' + lua_table_list(all_items))
    chunks.append('instances.byType = ' + lua_table_by_type(by_type))
    chunks.append('instances.byTuid = ' + lua_table_map_tuid(by_tuid))
    chunks.append('instances.byZone = ' + lua_table_map_zone(by_zone))
    chunks.append('return instances')
    return '\n\n'.join(chunks) + '\n'


def generate_instances_lua(extraction_dir: str, output_path: str | None = None) -> str:
    if output_path is None:
        output_path = os.path.join(extraction_dir, 'instances.lua')
    instances = _collect_instances(extraction_dir)
    lua_src = _emit_lua(instances)
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    with open(output_path, 'w', encoding='utf-8', newline='\n') as f:
        f.write(lua_src)
    return output_path


if __name__ == '__main__':
    import sys
    if len(sys.argv) < 2 or len(sys.argv) > 3:
        print('Usage: python tools/generate_instances_lua.py <extraction_dir> [output_path]')
        raise SystemExit(1)
    out = generate_instances_lua(sys.argv[1], sys.argv[2] if len(sys.argv) == 3 else None)
    print(f"✅ instances.lua généré: {out}")






